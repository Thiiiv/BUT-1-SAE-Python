from upemtk import *
from random import randint
from time import *

def intersection(x, y, lst_x2, lst_y2, joueur, compteur) :
    temp = 0
    lst_cordonnees_x = lst_x2
    lst_cordonnees_y = lst_y2
    distance_hori = []
    distance_verti = []
    tag = ''
    if joueur == joueur1 :
        tag = 'j1'
    else :
        tag = 'j2'
        
    for j in range(compteur) :
        if x >= lst_cordonnees_x[j] :
            distance_hori.append(x - lst_cordonnees_x[j])
        if lst_cordonnees_x[j] > x :
            distance_hori.append(lst_cordonnees_x[j] - x)
        if y >= lst_cordonnees_y[j] :
            distance_verti.append(y - lst_cordonnees_y[j])
        if lst_cordonnees_y[j] > y :
            distance_verti.append(lst_cordonnees_y[j] - y)
    for k in range(len(distance_hori)) :
        temp = 1
        if distance_verti[k] < 100 and distance_hori[k] < 100 :
            distance_hori.pop(k)
            distance_verti.pop(k)
            temp = 0
            break
    if temp != 0 :
        cercle(x, y, rayon, noir, joueur, 1, tag)
    return distance_hori, distance_verti

if __name__ == '__main__':
    cree_fenetre(500, 500)

    lst_col = ["blue","red","green","yellow"]
    noir = 'black'

    hazard = randint(1, 2)
    if hazard == 1:
        joueur1 = lst_col[0]
        joueur2 = lst_col[1]
    if hazard == 2:
        joueur1 = lst_col[2]
        joueur2 = lst_col[3]
    tour = 5
    rayon = 50
    distance_hori1 = []
    distance_verti1 = []
    distance_hori2 = []
    distance_verti2 = []
    lst_cordonnees_x1 = []
    lst_cordonnees_x2 = []
    lst_cordonnees_y1 = []
    lst_cordonnees_y2 = []
    temp = 0
    compteur = 0
    for i in range(tour):
        distance_verti1 = []
        distance_verti2 = []
        distance_hori1 = []
        distance_hori2 = []
        temp = 0
        x1, y1, z1 = attente_clic()
        lst_cordonnees_x1.append(x1)
        lst_cordonnees_y1.append(y1)
        if i == 0 :
            cercle(x1, y1, rayon, noir, joueur1, 1, 'j1')
        else :
            #intersection(x1, y1, lst_cordonnees_x2, lst_cordonnees_y2, joueur1, compteur)
            for j in range(len(lst_cordonnees_x2)) :
                if x1 >= lst_cordonnees_x2[j] :
                    distance_hori2.append(x1 - lst_cordonnees_x2[j])
                if lst_cordonnees_x2[j] > x1 :
                    distance_hori2.append(lst_cordonnees_x2[j] - x1)
                if y1 >= lst_cordonnees_y2[j] :
                    distance_verti2.append(y1 - lst_cordonnees_y2[j])
                if lst_cordonnees_y2[j] > y1 :
                    distance_verti2.append(lst_cordonnees_y2[j] - y1)
            for k in range(len(distance_hori2)) :
                temp = 1
                if distance_verti2[k] < 100 and distance_hori2[k] < 100 :
                    lst_cordonnees_x1.pop(-1)
                    lst_cordonnees_x1.pop(-1)
                    temp = 0
                    break
            if temp != 0 :
                cercle(x1, y1, rayon, noir, joueur1, 1, 'j1')
        x2, y2, z2 = attente_clic()
        lst_cordonnees_x2.append(x2)
        lst_cordonnees_y2.append(y2)
        print()
        print("x2 :", x2, "| y2 :", y2)
        #intersection(x2, y2, lst_cordonnees_x1, lst_cordonnees_y1, joueur2, compteur)
        for k in range(len(lst_cordonnees_x1)) :
            if lst_cordonnees_x1[k] >= x2 :
                distance_hori1.append(lst_cordonnees_x1[k] - x2)
                # Test
                #print("distance_hori1(1) :", distance_hori1)
            if x2 > lst_cordonnees_x1[k] :
                distance_hori1.append(x2 - lst_cordonnees_x1[k])
                # Test
                #print("distance_hori1(2) :", distance_hori1)
            if lst_cordonnees_y1[k] >= y2 :
                distance_verti1.append(lst_cordonnees_y1[k] - y2)
                # Test
                #print("distance_verti1(1) :", distance_verti1)
            if y2 > lst_cordonnees_y1[k] :
                distance_verti1.append(y2 - lst_cordonnees_y1[k])
                # Test
                #print("distance_verti1(2) :", distance_verti1)
        for j in range(len(distance_hori1)) :
            temp = 1
            if distance_verti1[j] < 100 and distance_hori1[j] < 100 :
                lst_cordonnees_x2.pop(-1)
                lst_cordonnees_y2.pop(-1)
                temp = 0
                break
        if temp != 0 :
            cercle(x2, y2, rayon, noir, joueur2, 1, 'j2')
        compteur += 1
        # Test
        print("distance_verti1 :", distance_verti1, "| distance_hori1 :", distance_hori1, "| distance_verti2 :", distance_verti2, "| distance_hori2 :", distance_hori2, "| compteur :", compteur, "| temp :", temp)
        print("lst_cordonnees_x1", lst_cordonnees_x1, "| lst_cordonnees_y1 :", lst_cordonnees_y1)
        mise_a_jour()
    
    attente_clic()
    sleep(1)
    ferme_fenetre()
